# mod
(def constant The_MinimumWorkTime_Context 'IDS_PARAMS_MODIFIER_MINWORKTIME') 	#最短作用时间
 
(def css $TextColorCantUseFx ()
	(textColor = 0xFF0797FA)
)

(def element SlotWorkTimeFinishedFX (zhuangtai:bool=true) layout=true
	(scope
		(event evShow)
		(var atWork:bool = "zhuangtai")
	)
	(style
		(position = "absolute")
		(left = "SLOT_SIZE / 2")
		(top = "SLOT_SIZE / 2")
	)

	(dispatch evShow on=addedToStage)
	(bind visible "atWork")
	(block
		(style
			(position = "absolute")
			(backgroundImage = 'url:../battle_hud/weapons_panel/slot/weapon_panel_slot_tint_blue.png')
			(pivotX = "SLOT_FX_SIZE / 2")
			(pivotY = "SLOT_FX_SIZE / 2")
		)

		(controller $Animation
			(bindcall play  duration=5
							from="{ scaleX: 1, scaleY: 1, alpha: 0.4 }"
							to="{ scaleX: 1, scaleY: 1, alpha: 0.0 }"
							(event "evShow")
			)
		)
	)
)

(def element SlotReloadBar_TimeBased () layout=true
	(scope
		(var _reloadEntityId:number = -1)
		(var _atWork:bool = false)
		(var _atCharge:bool = false)
		(var _inverted:bool = true)
		(var _remainTime:number = 0)
		(var _showTime:bool = true)
		(var _percentPassed:number = 0)
		(var _fontSize:number = "SLOT_RELOAD_FONT_SIZE")

		(macro HUMAN_READABLE_COUNTDOWN_SCOPE "_remainTime")

		(var fxMargins:number = "(SLOT_FX_SIZE - SLOT_SIZE) / 2")

		(var percentPassed:number = "abs((_atWork && _inverted ? 0 : 1) - _percentPassed)")
		(var progress:number = "percentPassed")
		(var curMaskY:number = "SLOT_SIZE * (1 - progress)")
	)
	(block
		(style
			(position = "absolute")
			(top = "fxMargins")
			(left = "fxMargins")
			(align = "center|middle")
			(width = "SLOT_SIZE")
			(height = "SLOT_SIZE")
			(backgroundColor = "0x88000000")
		)
	)

	(style
		(position = "absolute")
		(top = "-fxMargins")
		(left = "-fxMargins")
		(align = "center|middle")
		(width = "SLOT_FX_SIZE")
		(height = "SLOT_FX_SIZE")
	)

	(block
		(style
			(position = "absolute")
			(width = "SLOT_SIZE")
			(height = "SLOT_SIZE")
			(top = "fxMargins")
			(left = "fxMargins")
			#(backgroundImage = 'url:../battle_hud/weapons_panel/slot/weapon_panel_slot_bg.png')
			#(backgroundColor = "0xFF000000")
		)

		(block
			(style
				(position = "absolute")
				(top = "-fxMargins")
				(left = "-fxMargins")
			)
			(block
				(style
					(bind backgroundImage 'url:../battle_hud/weapons_panel/slot/weapon_panel_slot_tint_blue.png')
				)
			)
		)

		(block
			(class $FullsizeAbsolute)
			(style
				(bind top "curMaskY")
				(backgroundColor = "0xFF000000")
			)
			(isMask = true)
		)
	)

	(tf
		(bind visible "_showTime")
		(class $ActionPanelTimerCountdown)
		(style
			(bind fontSize "_fontSize")
		)
		(macro TFMouseEnabled value=false)
		(bind class '$TextColorCantUseFx')
		(bind text "countdownText")
	)
)
#  modend

(def element SlotConsumableRenderer (isAircarrier:bool, totalCount:number, _col:gfx) layout=true
	(scope
		(var col:gfx = "_col") 
		(var itemsList:array = "col.items" (event "col.evUpdated"))
		(var consumableEntity:gfx = "itemsList[$index]" (event "col.evUpdated"))
		(var battleConsumable:gfx = "consumableEntity.battleConsumable")
		(var consumableName:str = "battleConsumable.ident")
		(var consumableCmd:str = "battleConsumable.viewData.cmdName" (event "battleConsumable.evViewDataChanged"))
		(var currentCharge:number = "battleConsumable.currentCharge" (event "battleConsumable.evCurrentChargeChanged"))
		(var consumableState:number = "battleConsumable.state" (event "battleConsumable.evStateChanged"))
		(var ownerSquadronId:number = "battleConsumable.ownerSquadronId" (event "battleConsumable.evStateChanged"))
		(var consumableIndex:number = "battleConsumable.index"  (event "battleConsumable.evStateChanged"))
		(var isLocked:bool = "battleConsumable.isLocked" (event "battleConsumable.evIsLockedChanged"))
		(var isSpecial:bool = "battleConsumable.isSpecial")

		(var isTimeBased:bool = "battleConsumable.viewData.lifecycleType == SC.Battle.CONSUMABLE_LIFECYCLE_TYPE.TIME_BASED")

		(var workTimeText:str = "countdownFormat(currentCharge, currentCharge > 10 ? 0 : 1, currentCharge >= 60, false)")

		(var isSelected:bool = "consumableState == SC.Battle.CONSUMABLE_STATES.SELECTED")
		(var atWork:bool = "consumableState == SC.Battle.CONSUMABLE_STATES.AT_WORK")
		(var isReloading:bool = "isIn(consumableState, SC.Battle.CONSUMABLE_STATES.RELOADING_STATES)")
		(var isEmpty:bool = "consumableState == SC.Battle.CONSUMABLE_STATES.NO_AMMO")

		(var consumePostfix:str = "currentCharge == 0 && !(atWork) && isEmpty ? '_empty' : ''")
		(var itemImageUrl:str = "'url:../consumables/' + consumableName + consumePostfix + '.png'")
		
		(var timerEntity:gfx = "$datahub.getSingleEntity(CC.timer)")
		(var countdown:gfx = "consumableEntity && consumableEntity.hasComponent(CC.countDown) ? consumableEntity.countDown : null" (event "consumableEntity.evAdded") (event "consumableEntity.evRemoved"))		
		(var remainTime:number = "countdown ? countdown.endTime - timerEntity.timer.currentTime : 0" (event "timerEntity.timer.evFrequent") (event "countdown.evEndTimeChanged"))
		(var infiniteWorkTime:bool = "countdown && countdown.duration == -1" (event "consumableEntity.evAdded") (event "consumableEntity.evRemoved"))
		(var percentPassed:number = "countdown && !infiniteWorkTime ? remainTime / countdown.duration : 1")

		(var cmdEntity:gfx =  "$datahub.getPrimaryEntity(CC.commandMappingCommandName, consumableCmd)")
		(var isRegularAircarrierAbil:bool = "isAircarrier && !isSpecial")
		(var commandId:number = "isRegularAircarrierAbil ? 0 : cmdEntity.commandMappingCommand.id" (event  "cmdEntity.commandMappingCommand.evChanged"))

		(var _width:number = "SLOT_SIZE")
		(var _height:number = "SLOT_SIZE")

		# mod
		(var cantclosetime:number = "timerEntity.timer.currentTime"(event "timerEntity.timer.evFrequent"))
		(var cantclosetime_countdown:number = "timerEntity.timer.currentTime")

		# 获取消耗品最短使用时长
		(var usageAttributes:gfx = "battleConsumable.viewData.usageAttributes")
		(var usageNeutral:array = "usageAttributes.neutral" (event "battleConsumable.evCurrentChargeeChanged") (event "battleConsumable.evReloadTimeCoeffChanged") (event "battleConsumable.evWorkTimeCoeffChanged"))

		# (var _attributesNeutral:array = "usageNeutral")
		(var _attribute:dict = "usageNeutral[1]")

		# 最短使用时长(str)
		(var measuredValue:str = "_attribute.measuredValue")
		# 最短使用时长(num)(若无最短使用时长的描述,则将最短使用时长设为0)
		(var minUsageTime:number = "(tr(The_MinimumWorkTime_Context) in _attribute.attributeIDS) ? toNumber(measuredValue) : 0")

		
		#剩余时间
		(var remainTime_TimeBased:number = "minUsageTime + cantclosetime_countdown - cantclosetime")
		#剩余时间百分比
		(var percentPassed_TimeBased:number = "((minUsageTime > 0) && (remainTime_TimeBased > 0))? remainTime_TimeBased / minUsageTime : 1")


		(var CantCloseFlag:bool = "true")
		(var showTimeFlag:bool = "true")
		(var LastTimeFlag:bool = "false")
		(var BridgeportFlag:bool = "tr(The_MinimumWorkTime_Context) in _attribute.attributeIDS")
		#  modend
	)

	(style
		(width = "_width")
		(height = "_height")
		(bind marginRight "($index + 1) != totalCount ? PANEL_ITEM_MARGIN : 0")
	)

	
	(controller $Instance renderer='LabelAuto'
		(bind enabled "commandId == 0")
	)

	(block
		(class $FullsizeAbsolute)

		(element SlotItem
			(scope
				(bind _itemImageUrl "itemImageUrl")
				(bind _isSelectable "commandId")
				(bind _width "_width")
				(bind _height "_height")
				(bind _isLocked "isLocked")
			)
		)

		
		(element SlotReloadBar
			(scope
				(bind _atWork "atWork")
				(bind _percentPassed "percentPassed")
				(bind _remainTime "remainTime > 0 ? remainTime : 0")
				(bind _showTime "!infiniteWorkTime")
			)
			(class $FullsizeAbsolute)
			(bind visible "isReloading || atWork")
		)


		# mod
		(block
			(class $FullsizeAbsolute)

			(bind CantCloseFlag "true"(event "consumableEntity.battleConsumable.evWorkStarted"))
			# 获取 启用时时间 与 当前时间 相减得到 消耗品使用时间
			(bind cantclosetime_countdown "timerEntity.timer.currentTime"(event "consumableEntity.battleConsumable.evWorkStarted"))
			# 到达最小使用时间
			(bind CantCloseFlag "false"(event "consumableEntity.timeBasedFeedback.evMinWorkTimeFinished"))
			# 剩余时间是否已经小于最小使用时间
			(bind LastTimeFlag "remainTime < minUsageTime"(event "consumableEntity.battleConsumable.evWorkStarted"))

			(element SlotReloadBar_TimeBased
				(scope
					(bind _atWork "CantCloseFlag")
					(bind _percentPassed "percentPassed_TimeBased")
					(bind _remainTime "remainTime_TimeBased > 0 ? remainTime_TimeBased : 0")
					(bind _showTime "showTimeFlag")
				)
				(class $FullsizeAbsolute)
				(bind visible "CantCloseFlag && isTimeBased && atWork && !LastTimeFlag && BridgeportFlag")
			)
		

			(block
				(class $FullsizeAbsolute)
				(controller $FxInstance
					(bind renderer 'SlotWorkTimeFinishedFX')
					(args
						zhuangtai="atWork"
					)
					(bindcall create (event "consumableEntity.timeBasedFeedback.evMinWorkTimeFinished"))
				)
			)
		)
		#  modend

		
		(block
			(class $FullsizeAbsolute)
			(tf
				(bind visible "currentCharge > 0 && !isLocked && !isTimeBased")
				(style (position = "absolute") (top = "XS") (right = "XS"))
				(class $TextDefaultBoldNM)
				(bind text "currentCharge")
			)
			(block
				(bind visible "isTimeBased")
				(class $FullsizeAbsolute)
				(style
					(backgroundImage = 'url:../consumables/features/time_based.png')
				)
				(tf
					(bind visible "currentCharge > 0 && !isLocked && !atWork")
					(style (position = "absolute") (textAlign = "left") (top = "XS") (left = 21))
					(class $TextDefaultBoldNM)
					(bind text "workTimeText")
				)
			)
		)

		
		(block
			(class $FullsizeAbsolute)
			(controller $FxInstance lifetime=0.5
				(bind renderer 'SlotWorkStartedFX')
				(bindcall create (event "consumableEntity.battleConsumable.evWorkStarted"))
			)
			(controller $FxInstance lifetime=0.5
				(bind renderer 'SlotWorkStartedFX')
				(args
					accented="true"
				)
				(bindcall create (event "consumableEntity.battleConsumable.evReloadEnded"))
			)
			(controller $FxInstance lifetime=0.5
				(bind renderer "'SlotReloadStartedFX'")
				(bindcall create (event "consumableEntity.battleConsumable.evReloadStarted"))
			)
			(controller $FxInstance lifetime=10.5
				(bind renderer 'SlotWorkStartedFX')
				(bind renderer 'SlotWorkTimeFinishedFX')
				(args
					accented="true"
					zhuangtai="atWork"
				)
				(bindcall create (event "consumableEntity.timeBasedFeedback.evMinWorkTimeFinished"))
			)
		)

		
		(block
			(style
				(position = "absolute")
				(left = "-(SLOT_FX_SIZE - SLOT_SIZE) / 2")
				(top = "-(SLOT_FX_SIZE - SLOT_SIZE) / 2")
			)
			(bind visible "atWork || isSelected")
			(block
				(style
					(backgroundImage = 'url:../battle_hud/weapons_panel/slot/weapon_panel_slot_stroke_green.png')
					(backgroundSize = "fill")
					(width = "SLOT_FX_SIZE")
					(height = "SLOT_FX_SIZE")
				)
			)
			(controller $Animation
				(play duration=1.0
								from={alpha: 1}
								to={alpha: 0.3}
								repeatCount=-1
								action="killAll"
				)
				(bind enabled "atWork")
			)
		)
	)

	(element HIT_TEST_TOOLTIP_CONTAINER
		(macro MOUSE_LMB_EXTERNAL_CALL 'direct.action' "['battle.useConsumable', [{consumableIndex: consumableIndex, squadronId: ownerSquadronId}]]" "!isRegularAircarrierAbil")
		
		(controller $Tooltip (renderer = 'BattleConsumableTooltip')
			(args
				_battleConsumable = "battleConsumable"
				_viewData = "battleConsumable.viewData"
				_parameterOwnerId = "consumableEntity.id"
				_isOwn = "true"
				_isPlaneConsumable = "ownerSquadronId != -1"
			)
			(align="bottom|center")
			(position="border")
			(offset=[0, 20])
			(screenBoundsOffset={left:10, top:30, right:10, bottom:100})
			(macro SIMPLE_TOOLTIP_ANIMATION)
		)
	)

	
	(controller $Instance (renderer = 'HotkeyIndicator')
		(bind enabled "commandId && !isRegularAircarrierAbil")
		(args _commandId="commandId" _toggled="atWork")
		(exprs
			(style
				(bottom = "-HOTKEY_SIZE[SIZE.MEDIUM]")
				(position = "absolute")
				(hcenter = "0px")
			)
		)
	)
)
